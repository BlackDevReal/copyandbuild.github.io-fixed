<!DOCTYPE html>
<html lang="de">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Bild-Upload, Konvertierung und Anzeige</title>
    <style>
        body {
            display: flex;
            justify-content: center;
            align-items: center;
            height: 100vh;
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            background-color: #121212;
            color: white;
            margin: 0;
        }

        .container {
            text-align: center;
            background-color: #1e1e1e;
            padding: 20px;
            border-radius: 12px;
            box-shadow: 0 0 20px rgba(0, 0, 0, 0.8);
        }

        h1 {
            margin-bottom: 20px;
            font-size: 2.5em;
            font-weight: bold;
            color: #e0e0e0;
            text-shadow: 0 0 10px rgba(128, 0, 128, 0.8); /* Lila Glüheffekt */
        }

        #setup {
            margin-bottom: 20px;
        }

        #imageUpload {
            padding: 12px;
            font-size: 1em;
            margin-bottom: 20px;
            border-radius: 8px;
            border: 1px solid #444;
            background-color: #333;
            color: white;
            box-shadow: 0 0 12px rgba(128, 0, 128, 0.8); /* Lila Glüheffekt */
            transition: box-shadow 0.3s, background-color 0.3s;
        }

        #imageUpload:focus {
            background-color: #444;
            box-shadow: 0 0 16px rgba(128, 0, 128, 1); /* Intensiverer Glüheffekt beim Fokus */
            outline: none;
        }

        #formatSelect, button {
            padding: 12px 24px;
            font-size: 1em;
            cursor: pointer;
            border: none;
            border-radius: 10px;
            transition: background-color 0.3s, box-shadow 0.3s, transform 0.3s;
            box-shadow: 0 0 12px rgba(128, 0, 128, 0.8); /* Lila Glüheffekt */
            background-color: #7d3c98;
            color: white;
            margin: 10px;
        }

        #formatSelect {
            background-color: #333;
            color: white;
        }

        button:hover, #formatSelect:hover {
            background-color: #5b2c6f;
            box-shadow: 0 0 20px rgba(128, 0, 128, 1); /* Stärkerer lila Glüheffekt beim Hover */
            transform: scale(1.05); /* Leichte Vergrößerung beim Hover */
        }

        button.red {
            background-color: #e74c3c;
            box-shadow: 0 0 12px rgba(255, 0, 0, 0.8); /* Roter Glüheffekt */
        }

        button.red:hover {
            background-color: #c0392b;
            box-shadow: 0 0 20px rgba(255, 0, 0, 1); /* Stärkerer roter Glüheffekt beim Hover */
            transform: scale(1.05); /* Leichte Vergrößerung beim Hover */
        }

        #image-viewer {
            display: none;
            position: fixed;
            z-index: 1;
            padding-top: 100px;
            left: 0;
            top: 0;
            width: 100%;
            height: 100%;
            overflow: auto;
            background-color: rgba(0, 0, 0, 0.9);
        }

        .modal-content {
            margin: auto;
            display: block;
            width: 80%;
            max-width: 700px;
        }

        .modal-content {
            animation-name: zoom;
            animation-duration: 0.6s;
        }

        @keyframes zoom {
            from { transform: scale(0) }
            to { transform: scale(1) }
        }

        #image-viewer .close {
            position: absolute;
            top: 15px;
            right: 35px;
            color: #f1f1f1;
            font-size: 40px;
            font-weight: bold;
            transition: 0.3s;
        }

        #image-viewer .close:hover,
        #image-viewer .close:focus {
            color: #bbb;
            text-decoration: none;
            cursor: pointer;
        }

        @media only screen and (max-width: 700px) {
            .modal-content {
                width: 100%;
            }
        }
    </style>
</head>
<body>

    <div class="container">
        <h1>Bild-Konvertierung und Anzeige</h1>

        <div id="setup">
            <input type="file" id="imageUpload" accept="image/*">
            <select id="formatSelect">
                <option value="image/png">PNG</option>
                <option value="image/jpeg">JPEG</option>
            </select>
            <button onclick="convertAndDisplayImage()">Bild Konvertieren und Anzeigen</button>
        </div>

        <div class="images">
            <img id="converted-image" src="" alt="Konvertiertes Bild" style="display:none;">
            <a id="downloadButton" href="#" download="converted-image" style="display:none;">
                <button>Herunterladen</button>
            </a>
        </div>

        <div id="image-viewer">
            <span class="close">&times;</span>
            <img class="modal-content" id="full-image">
        </div>
    </div>

    <script>
        function convertAndDisplayImage() {
            const fileInput = document.getElementById('imageUpload');
            const format = document.getElementById('formatSelect').value;
            const imageFile = fileInput.files[0];
            if (!imageFile) {
                alert('Bitte wähle eine Bilddatei aus.');
                return;
            }

            const reader = new FileReader();
            reader.onload = function(event) {
                const img = new Image();
                img.src = event.target.result;
                img.onload = function() {
                    const canvas = document.createElement('canvas');
                    const ctx = canvas.getContext('2d');
                    canvas.width = img.width;
                    canvas.height = img.height;
                    ctx.drawImage(img, 0, 0);

                    // Konvertiere das Bild und zeige es an
                    canvas.toBlob(function(blob) {
                        const newImageUrl = URL.createObjectURL(blob);
                        const convertedImageElement = document.getElementById('converted-image');
                        const downloadButton = document.getElementById('downloadButton');

                        convertedImageElement.src = newImageUrl;
                        convertedImageElement.style.display = 'block'; // Bild anzeigen

                        // Setze die Download-URL und zeige den Download-Button an
                        downloadButton.href = newImageUrl;
                        downloadButton.style.display = 'block';
                        downloadButton.download = 'converted-image.' + (format === 'image/png' ? 'png' : 'jpg');
                    }, format);
                }
            }
            reader.readAsDataURL(imageFile);
        }

        document.getElementById('converted-image').addEventListener('click', function() {
            document.getElementById('full-image').src = this.src;
            document.getElementById('image-viewer').style.display = 'block';
        });

        document.getElementById('image-viewer').getElementsByClassName('close')[0].addEventListener('click', function() {
            document.getElementById('image-viewer').style.display = 'none';
        });
    </script>

</body>
</html>
